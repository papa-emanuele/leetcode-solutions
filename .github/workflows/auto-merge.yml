name: Auto Merge Branches into Develop and Main

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  get_dates:
    runs-on: ubuntu-latest
    outputs:
      today: ${{ steps.get_date.outputs.today }}
    steps:
      - id: get_date
        run: echo "today=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT

  check_daily:
    runs-on: ubuntu-latest
    needs: get_dates
    outputs:
      changed: ${{ steps.set_output.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check daily branch for changes in last 24h
        id: set_output
        run: |
          git fetch origin daily
          git checkout origin/daily --no-track -b daily-latest
          changes=$(git log --since="24 hours ago" --name-only --pretty=format: | grep -v '^$' | sort | uniq)
          if [ -n "$changes" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  check_problems:
    runs-on: ubuntu-latest
    needs: get_dates
    outputs:
      changed: ${{ steps.set_output.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check problems branch for changes in last 24h
        id: set_output
        run: |
          git fetch origin problems
          git checkout origin/problems --no-track -b problems-latest
          changes=$(git log --since="24 hours ago" --name-only --pretty=format: | grep -v '^$' | sort | uniq)
          if [ -n "$changes" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  merge_daily:
    runs-on: ubuntu-latest
    needs: check_daily
    if: needs.check_daily.outputs.changed == 'true'
    env:
      AUTHOR_NAME: ${{ secrets.AUTHOR_NAME }}
      AUTHOR_EMAIL: ${{ secrets.AUTHOR_EMAIL }}
      PAT: ${{ secrets.PERSONAL_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git author (no output)
        run: |
          git config user.name "$AUTHOR_NAME"
          git config user.email "$AUTHOR_EMAIL"

      - name: Set remote to use PAT (no output)
        run: |
          git remote set-url origin https://x-access-token:${PAT}@github.com/${{ github.repository }}

      - name: Merge daily into develop
        run: |
          git fetch origin
          git checkout develop
          git pull origin develop
          git merge --no-ff origin/daily -m "Merge 'daily' into 'develop'"
          git push origin develop

  merge_problems:
    runs-on: ubuntu-latest
    needs: check_problems
    if: needs.check_problems.outputs.changed == 'true'
    env:
      AUTHOR_NAME: ${{ secrets.AUTHOR_NAME }}
      AUTHOR_EMAIL: ${{ secrets.AUTHOR_EMAIL }}
      PAT: ${{ secrets.PERSONAL_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git author (no output)
        run: |
          git config user.name "$AUTHOR_NAME"
          git config user.email "$AUTHOR_EMAIL"

      - name: Set remote to use PAT (no output)
        run: |
          git remote set-url origin https://x-access-token:${PAT}@github.com/${{ github.repository }}

      - name: Merge problems into develop
        run: |
          git fetch origin
          git checkout develop
          git pull origin develop
          git merge --no-ff origin/problems -m "Merge 'problems' into 'develop'"
          git push origin develop

  merge_main:
    runs-on: ubuntu-latest
    needs: [merge_daily, merge_problems]
    if: always()
    env:
      AUTHOR_NAME: ${{ secrets.AUTHOR_NAME }}
      AUTHOR_EMAIL: ${{ secrets.AUTHOR_EMAIL }}
      PAT: ${{ secrets.PERSONAL_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Configure git author (no output)
        run: |
          git config user.name "$AUTHOR_NAME"
          git config user.email "$AUTHOR_EMAIL"
  
      - name: Set remote to use PAT (no output)
        run: |
          git remote set-url origin https://x-access-token:${PAT}@github.com/${{ github.repository }}
  
      - name: Check if either merge was successful
        id: check_merge
        run: |
          if [ "${{ needs.merge_daily.result }}" = "success" ] || [ "${{ needs.merge_problems.result }}" = "success" ]; then
            echo "run_merge=true" >> $GITHUB_OUTPUT
          else
            echo "run_merge=false" >> $GITHUB_OUTPUT
          fi
  
      - name: Merge develop into main
        if: steps.check_merge.outputs.run_merge == 'true'
        run: |
          git fetch origin
          git checkout main
          git pull origin main
          git merge --no-ff origin/develop -m "Merge 'develop' into 'main'"
          git push origin main
